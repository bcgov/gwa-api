# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [dev, feature/*, fix/*, renovate/*]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  sonar-scan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps
        run: |
          sudo apt update
          sudo apt install -y pipx git
          pipx ensurepath
          pipx install poetry

      - name: Test coverage for Gateway API
        run: |
          export PATH=/root/.local/bin:$PATH
          cd microservices/gatewayApi
          poetry env use 3.11
          poetry install --no-root --no-cache
          ENV=test GITHASH=11223344 \
          poetry run coverage run --branch -m pytest -s -v
          poetry run coverage xml

      - name: Test coverage for Scheduler API
        run: |
          export PATH=/root/.local/bin:$PATH
          cd microservices/gatewayJobScheduler
          poetry install --no-root
          SYNC_INTERVAL=1000 \
          DATA_PLANE=test-dp \
          poetry run coverage run --branch -m pytest -s -v
          poetry run coverage xml

      - name: Test coverage for Kube API
        run: |
          export PATH=/root/.local/bin:$PATH
          cd microservices/kubeApi
          poetry install --no-root
          ACCESS_USER=kubeuser ACCESS_SECRET=s3cret \
          poetry run coverage run --branch -m pytest -s -v
          poetry run coverage xml

      - name: Test coverage for Compatibility API
        run: |
          export PATH=/root/.local/bin:$PATH
          cd microservices/compatibilityApi
          poetry install --no-root
          poetry run coverage run --branch -m pytest -s -v
          poetry run coverage xml

      - name: SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  gwa-api:
    needs: sonar-scan
    name: Docker Image for gwa-api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 
      - name: Check if build needed
        id: check
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "^microservices/gatewayApi/\|^.github/workflows/dev.yml"; then
            echo "build_needed=true" >> $GITHUB_OUTPUT
          else
            echo "build_needed=false" >> $GITHUB_OUTPUT
          fi
      - name: Skip message
        if: steps.check.outputs.build_needed == 'false'
        run: echo "No changes in gatewayApi, skipping build"
      - uses: docker/build-push-action@v1
        if: steps.check.outputs.build_needed == 'true'
        with:
          registry: docker.pkg.github.com
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
          repository: bcgov/gwa-api/gwa-gateway-api
          path: microservices/gatewayApi
          dockerfile: microservices/gatewayApi/Dockerfile
          tag_with_ref: true
          tag_with_sha: false
          add_git_labels: true
          push: true

  gwa-scheduler:
    needs: sonar-scan
    name: Docker Image for gwa-scheduler
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 
      - name: Check if build needed
        id: check
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "^microservices/gatewayJobScheduler/\|^.github/workflows/dev.yml"; then
            echo "build_needed=true" >> $GITHUB_OUTPUT
          else
            echo "build_needed=false" >> $GITHUB_OUTPUT
          fi
      - name: Skip message
        if: steps.check.outputs.build_needed == 'false'
        run: echo "No changes in gatewayJobScheduler, skipping build"
      - uses: docker/build-push-action@v1
        if: steps.check.outputs.build_needed == 'true'
        with:
          registry: docker.pkg.github.com
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
          repository: bcgov/gwa-api/gwa-scheduler
          path: microservices/gatewayJobScheduler
          dockerfile: microservices/gatewayJobScheduler/Dockerfile
          tag_with_ref: true
          tag_with_sha: false
          add_git_labels: true
          push: true

  gwa-kube-api:
    needs: sonar-scan
    name: Docker Image for gwa-kube-api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 
      - name: Check if build needed
        id: check
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "^microservices/kubeApi/\|^.github/workflows/dev.yml"; then
            echo "build_needed=true" >> $GITHUB_OUTPUT
          else
            echo "build_needed=false" >> $GITHUB_OUTPUT
          fi
      - name: Skip message
        if: steps.check.outputs.build_needed == 'false'
        run: echo "No changes in kubeApi, skipping build"
      - uses: docker/build-push-action@v1
        if: steps.check.outputs.build_needed == 'true'
        with:
          registry: docker.pkg.github.com
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
          repository: bcgov/gwa-api/gwa-kube-api
          path: microservices/kubeApi
          dockerfile: microservices/kubeApi/Dockerfile
          tag_with_ref: true
          tag_with_sha: false
          add_git_labels: true
          push: true

  gwa-compatibility-api:
    needs: sonar-scan
    name: Docker Image for gwa-compatibility-api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/build-push-action@v1
        with:
          registry: docker.pkg.github.com
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
          repository: bcgov/gwa-api/gwa-compatibility-api
          path: microservices/compatibilityApi
          dockerfile: microservices/compatibilityApi/Dockerfile
          tag_with_ref: true
          tag_with_sha: false
          add_git_labels: true
          push: true
